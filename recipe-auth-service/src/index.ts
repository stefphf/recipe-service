import express from "express";
import { AppDataSource } from "./data-source";
import authRoutes from "./routes/authRoutes";
import userRoutes from "./routes/userRoutes";
import { connectRabbitMQ } from "./rabbitmq";
import dotenv from "dotenv";

dotenv.config();

const app = express();
const PORT = process.env.PORT || 3001;

app.use(express.json());

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
AppDataSource.initialize()
  .then(async () => {
    console.log("‚úÖ Auth Service Database connected!");

    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RabbitMQ, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫
    try {
      await connectRabbitMQ();
      console.log("‚úÖ Auth Service RabbitMQ connected!");
    } catch (error) {
      console.log("‚ö†Ô∏è RabbitMQ not available, continuing without events...");
    }

    app.use("/auth", authRoutes);
    app.use("/users", userRoutes);

    app.get("/health", (req, res) => {
      res.json({
        status: "OK",
        service: "auth-service",
        timestamp: new Date().toISOString(),
      });
    });

    app.use("*", (req, res) => {
      res.status(404).json({ message: "Route not found in auth service" });
    });

    app.listen(PORT, () => {
      console.log(`üîë Auth Service running on http://localhost:${PORT}`);
    });
  })
  .catch((error) => {
    console.error("‚ùå Database connection error:", error);
    process.exit(1);
  });

export default app;
